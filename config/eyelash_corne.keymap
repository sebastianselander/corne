#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

// Eyelash corne key positions. Source missing
    // |------------------------|------------------------|
    // | LEFT_HAND_KEYS         |        RIGHT_HAND_KEYS |
    // |                        |                        |
    // | 0  1  2  3  4  5       |      6  7  8  9  10 11 |
    // | 12 13 14 15 16 17      |      18 19 20 21 22 23 |
    // | 24 25 26 27 28 29      |      30 31 32 33 34 35 |
    // |          36 37 38      |      39 40 41          |
    // |------------------------|------------------------|

#define LEFT_HAND_KEYS    \
        0  1  2  3  4  5  \
        12 13 14 15 16 17 \
        24 25 26 27 28 29 \
                 36 37 38

#define RIGHT_HAND_KEYS   \
        6  7  8  9  10 11 \
        18 19 20 21 22 23 \
        30 31 32 33 34 35 \
        39 40 41

#define THUMB_KEYS 36 37 38 39 40 41

/ {
    macros {

        // Create Å character in a macro using Alt-gr
        ao_macro: ao_macro {
            label = "&AO_MACRO";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press>
                , <&kp RALT>
                , <&macro_tap>
                , <&kp A>
                , <&macro_release>
                , <&kp RALT>
                , <&macro_tap>
                , <&kp A>;
        };

        // Create Ä character in a macro using Alt-gr
        ae_macro: ae_macro {
            label = "&AE_MACRO";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press>
                , <&kp RALT>
                , <&macro_tap>
                , <&kp A>
                , <&macro_release>
                , <&kp RALT>
                , <&macro_press>
                , <&kp LSHFT>
                , <&macro_tap>
                , <&kp SQT>
                , <&macro_release>
                , <&kp LSHFT>;
        };

        // Create Ö character in a macro using Alt-gr
        oe_macro: oe_macro {
            label = "&OE_MACRO";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press>
                , <&kp RALT>
                , <&macro_tap>
                , <&kp O>
                , <&macro_release>
                , <&kp RALT>
                , <&macro_press>
                , <&kp LSHFT>
                , <&macro_tap>
                , <&kp SQT>
                , <&macro_release>
                , <&kp LSHFT>;
        };
    };
};

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
      combos {
        compatible = "zmk,combos";
        combo_ao_combo {
            timeout-ms = <45>;
            key-positions = <25 9>;
            bindings = <&ao_macro>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };

        combo_ae_combo {
            timeout-ms = <45>;
            key-positions = <25 15>;
            bindings = <&ae_macro>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };

        combo_oe_combo {
            timeout-ms = <45>;
            key-positions = <15 9>;
            bindings = <&oe_macro>;
            layers = <0>;
            require-prior-idle-ms = <50>;
        };
      };


behaviors {
    lt {
        flavor = "hold-preferred";
    };
    skp: sticky_key_press_quick {
        compatible = "zmk,behavior-sticky-key";
        #binding-cells = <1>;
        bindings = <&kp>;
        release-after-ms = <1000>;
        quick-release;
        ignore-modifiers;
    };
    lsd: left_shift_dance {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&skp LSHIFT>, <&caps_word>;
    };
    rpi: require_prior_idle {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        quick-tap-ms = <250>;
        require-prior-idle-ms = <100>;
        bindings = <&kp>, <&kp>;
    };
    rpil: require_prior_idle_layer {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        quick-tap-ms = <250>;
        require-prior-idle-ms = <100>;
        bindings = <&mo>, <&kp>;
    };
    hrm_left_pinky: hrm_left_pinky {
        compatible = "zmk,behavior-hold-tap";
        flavor = "tap-preferred";
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <240>;
        quick-tap-ms = <250>;
        require-prior-idle-ms = <100>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    hrm_left_ring: hrm_left_ring {
        compatible = "zmk,behavior-hold-tap";
        flavor = "tap-preferred";
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <220>;
        quick-tap-ms = <150>;
        require-prior-idle-ms = <100>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    hrm_left_middle: hrm_left_middle {
        compatible = "zmk,behavior-hold-tap";
        flavor = "tap-preferred";
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <200>;
        quick-tap-ms = <150>;
        require-prior-idle-ms = <100>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    hrm_left_index: hrm_left_index {
        compatible = "zmk,behavior-hold-tap";
        flavor = "tap-preferred";
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <180>;
        quick-tap-ms = <150>;
        require-prior-idle-ms = <100>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };

    hrm_right_pinky: hrm_right_pinky {
        compatible = "zmk,behavior-hold-tap";
        flavor = "tap-preferred";
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <240>;
        quick-tap-ms = <250>;
        require-prior-idle-ms = <100>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    hrm_right_ring: hrm_right_ring {
        compatible = "zmk,behavior-hold-tap";
        flavor = "tap-preferred";
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <220>;
        quick-tap-ms = <150>;
        require-prior-idle-ms = <100>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    hrm_right_middle: hrm_right_middle {
        compatible = "zmk,behavior-hold-tap";
        flavor = "tap-preferred";
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <200>;
        quick-tap-ms = <150>;
        require-prior-idle-ms = <100>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    hrm_right_index: hrm_right_index {
        compatible = "zmk,behavior-hold-tap";
        flavor = "tap-preferred";
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // wait for other home row mods
        tapping-term-ms = <180>;
        quick-tap-ms = <150>;
        require-prior-idle-ms = <100>;
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
    };
    layer_hold_stickytap: layer_hold_stickytap {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        tapping-term-ms = <150>;
        bindings = <&mo>, <&skp>;
        flavor = "tap-preferred";
        quick-tap-ms = <175>;
    };
    layer_hold_tap: layer_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        #binding-cells = <2>;
        tapping-term-ms = <150>;
        bindings = <&mo>, <&kp>;
        flavor = "tap-preferred";
        quick-tap-ms = <175>;
    };
};
    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

#define HRM_A(key) hrm_left_pinky key A
#define HRM_S(key) hrm_left_ring key S
#define HRM_D(key) hrm_left_middle key D
#define HRM_F(key) hrm_left_index key F

#define HRM_J(key) hrm_right_pinky key J
#define HRM_K(key) hrm_right_ring key K
#define HRM_L(key) hrm_right_middle key L
#define HRM_SEMI(key) hrm_right_index key SEMI

// layer_none {
//      bindings = <
//         &none                         &none                         &none                         &none                         &none                         &none                &none        &none                         &none                         &none                         &none                         &none                         &none
//         &none                         &none                         &none                         &none                         &none                         &none          &none &none &none  &none                         &none                         &none                         &none                         &none                         &none
//         &none                         &none                         &none                         &none                         &none                         &none  &none         &none        &none                         &none                         &none                         &none                         &none                         &none
//                                                                                                   &none                         &none                         &none                             &none                         &none                         &none
//      >;
//      sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
// };


    keymap {
        compatible = "zmk,keymap";

        layer_Base {
            display-name = "QWERTY";
            bindings = <
                &kp EXCL                      &kp Q                         &kp W                         &kp E                         &kp R                         &kp T                &none        &kp Y                         &kp U                         &kp I                         &kp O                         &kp P                         &kp LBKT
                &kp ESC                       &HRM_A(LGUI)                  &HRM_S(LALT)                  &HRM_D(LCTRL)                 &HRM_F(LSHFT)                 &kp G          &none &none &none  &kp H                         &HRM_J(LSHFT)                 &HRM_K(RCTRL)                 &HRM_L(LALT)                  &HRM_SEMI(RGUI)               &kp SQT
                &skp LSHFT                    &kp Z                         &kp X                         &kp C                         &kp V                         &kp B  &none         &none        &kp N                         &kp M                         &kp COMMA                     &kp DOT                       &kp SLASH                     &skp RSHFT
                                                                                                          &layer_hold_stickytap 3 LSHFT &layer_hold_tap 2 BSPC        &caps_word                        &kp TAB                       &layer_hold_tap 1 SPACE       &kp ENTER
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        // missing: {}()[]
        layer_Symbol {
             display-name = "SYMBOL";
             bindings = <
                 &kp GRAVE  &kp AMPS   &kp SQT   &kp DQT         &kp PLUS    &kp QMARK                 &none        &kp GRAVE  &kp RSHFT  &kp RCTRL  &kp LALT   &kp RGUI   &none
                 &kp HASH   &kp CARET  &kp EQUAL &kp UNDERSCORE  &kp DOLLAR  &kp STAR            &none &none &none  &kp DQT    &kp BSPC   &kp TAB    &kp SPACE  &kp ENTER  &none
                 &kp TILDE  &kp LT     &kp PIPE  &kp MINUS       &kp GT      &kp SLASH   &none         &none        &kp SQT    &kp DEL    &kp COMMA  &kp DOT    &none      &none
                                                 &kp PERCENT     &kp COLON   &kp AT                                 &none      &none      &none
             >;
             sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        layer_Numpad {
             display-name = "NUMPAD";
             bindings = <
                 &none      &kp LGUI     &kp LALT   &kp LCTRL    &kp LSHFT  &none                &none           &kp PERCENT   &kp N7    &kp N8    &kp N9    &kp COLON &none
                 &none      &kp ENTER    &kp SPACE  &kp TAB      &kp BSPC   &none          &none &none &none     &kp PLUS      &kp N4    &kp N5    &kp N6    &kp MINUS &none
                 &none      &none        &none      &none        &kp DEL    &none  &none         &none           &kp STAR      &kp N1    &kp N2    &kp N3    &kp SLASH &none
                                                    &none        &none      &none                                &kp COMMA     &kp N0    &kp DOT
                                 

             >;
             sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        layer_Navigation {
             display-name = "NAV";
             bindings = <
                 &trans      &trans      &trans      &trans        &trans      &trans                   &trans            &kp K_REDO    &kp K_PASTE  &K_COPY     &K_CUT    &kp K_UNDO   &trans
                 &trans      &kp LGUI    &kp LALT    &kp LCTRL     &kp LSHFT   &PSCRN            &trans &trans &trans     &kp LEFT      &kp DOWN     &kp UP      &kp RIGHT &trans       &trans
                 &trans      &trans      &trans      &trans        &trans      &trans     &trans         &trans           &kp HOME      &kp PG_DN    &kp PG_UP   &kp END   &trans       &trans
                                         &trans      &trans        &trans                                                 &trans        &trans       &trans     
             >;
             sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        layer_none {
             bindings = <
                &none &none &none &none &none &none                &none        &none &none &none &none &none &none
                &none &none &none &none &none &none          &none &none &none  &none &none &none &none &none &none
                &none &none &none &none &none &none  &none         &none        &none &none &none &none &none &none
                                  &none &none &none                             &none &none &none
             >;
             sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

    };
};

